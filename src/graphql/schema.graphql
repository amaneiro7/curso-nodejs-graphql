type Query {
    hello: String!
    getPerson(name: String, age: Int): String
    getInt(age: Int!): Int
    getFloat(price: Float!): Float
    getString: String
    getBoolean: Boolean
    getID: ID
    getNumbers(numbers: [Int!]!): [Int]
    product(id: ID): Product
    products: [Product!]!
  }

  type Mutation {
    login(email: EmailAddress!, password: String!): AuthResponse
    addProduct(dto: CreateProductDTO!): Product
    updateProduct(id: ID!, dto: UpdateProductDTO!): Product
    deleteProduct(id: ID!) : ID
    addCategory(dto: CreateCategoryDTO): Category!
  }

  type Product {
    id: ID!
    name: String!
    price: Float!
    description: String!
    image: URL!
    createdAt: String!
    categoryId: ID!
    category: Category!
  }

  type Category {
    id: ID!
    name: String!
    image: URL!
  }

  input CreateProductDTO {
    name: String!
    price: Int!
    description: String!
    image: URL!
    categoryId: ID!
  }

  input UpdateProductDTO {
    name: String
    price: Int
    description: String
    image: URL
    categoryId: ID
  }

  input CreateCategoryDTO {
    name: CategoryNameType!
    image: URL!
  }

  type AuthResponse {
    access_token: JWT!
    user: User!
  }

  type User {
    id: ID!
    email: EmailAddress!
    role: String!
    createdAt: String!
  }

scalar CategoryNameType
